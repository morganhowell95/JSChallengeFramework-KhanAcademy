(function() {
  var matrixutilities;

  matrixutilities = (function() {
    var util;
    return util = {
      add: function(one, two) {
        var i, j, len, len1, m, n, result, row, value;
        if (one.length !== two.length) {
          throw new Error('Matrix y dimensions do not match');
        }
        result = [];
        for (i = m = 0, len = one.length; m < len; i = ++m) {
          row = one[i];
          if (row.length !== two[i].length) {
            throw new Error("Matrix x dimensions do not match on row " + (i + 1));
          }
          result[i] = [];
          for (j = n = 0, len1 = row.length; n < len1; j = ++n) {
            value = row[j];
            result[i][j] = value + two[i][j];
          }
        }
        return result;
      },
      multiply: function(one, two) {
        var j, k, l, len, len1, m, n, result, row, size, sum, value;
        if (one[0].length !== two.length) {
          throw new Error('Matrix 1\'s row count should equal matrix 2\'s column count');
        }
        size = one[0].length;
        result = [];
        for (j = m = 0, len = two.length; m < len; j = ++m) {
          row = two[j];
          result[j] = [];
          for (k = n = 0, len1 = row.length; n < len1; k = ++n) {
            value = row[k];
            l = size;
            sum = 0;
            while (l--) {
              sum += one[j][l] * two[l][k];
            }
            result[j][k] = sum;
          }
        }
        return result;
      },
      flip: function(matrix) {
        var j, k, len, len1, m, n, result, row, value;
        result = [];
        for (j = m = 0, len = matrix.length; m < len; j = ++m) {
          row = matrix[j];
          for (k = n = 0, len1 = row.length; n < len1; k = ++n) {
            value = row[k];
            (result[k] || (result[k] = []))[j] = value;
          }
        }
        return result;
      },
      to2d: function(matrix) {
        return [[matrix[0][0] || 1, matrix[0][1] || 0, matrix[0][3] || 0], [matrix[1][0] || 0, matrix[1][1] || 1, matrix[1][3] || 0]];
      },
      to3d: function(matrix) {
        return [[matrix[0][0] || 1, matrix[0][1] || 0, 0, matrix[0][2] || 0], [matrix[1][0] || 0, matrix[1][1] || 1, 0, matrix[1][2] || 0], [0, 0, 1, 0], [0, 0, 0, 1]];
      },
      Identity: function() {
        return [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
      }
    };
  })();

}).call(this);
